// Closed predicates
*Knows(person, person)
*Prior(constant)

// Target predicate
Trusts(person, person)

// Rules

// FFpp
1.0 Knows(a, b), Knows(b, c), Knows(a, c), Trusts(a, b), Trusts(b, c) => Trusts(a, c)
// FFpm
1.0 Knows(a, b), Knows(b, c), Knows(a, c), Trusts(a, b), !Trusts(b, c) => !Trusts(a, c)
// FFmp
1.0 Knows(a, b), Knows(b, c), Knows(a, c), !Trusts(a, b), Trusts(b, c) => !Trusts(a, c)
// FFmm
1.0 Knows(a, b), Knows(b, c), Knows(a, c), !Trusts(a, b), !Trusts(b, c) => Trusts(a, c)

// FBpp
1.0 Knows(a, b), Knows(c, b), Knows(a, c), Trusts(a, b), Trusts(c, b) => Trusts(a, c) 
// FBpm
1.0 Knows(a, b), Knows(c, b), Knows(a, c), Trusts(a, b), !Trusts(c, b) => !Trusts(a, c)
// FBmp
1.0 Knows(a, b), Knows(c, b), Knows(a, c), !Trusts(a, b), Trusts(c, b) => !Trusts(a, c)
// FBmm
1.0 Knows(a, b), Knows(c, b), Knows(a, c), !Trusts(a, b), !Trusts(c, b) => Trusts(a, c)

// BFpp
1.0 Knows(b, a), Knows(b, c), Knows(a, c), Trusts(b, a), Trusts(b, c) => Trusts(a, c)
// BFpm
1.0 Knows(b, a), Knows(b, c), Knows(a, c), Trusts(b, a), !Trusts(b, c) => !Trusts(a, c)
// BFmp
1.0 Knows(b, a), Knows(b, c), Knows(a, c), !Trusts(b, a), Trusts(b, c) => !Trusts(a, c)
// BFmm
1.0 Knows(b, a), Knows(b, c), Knows(a, c), !Trusts(b, a), !Trusts(b, c) => Trusts(a, c)

// BBpp
1.0 Knows(b, a), Knows(c, b), Knows(a, c), Trusts(b, a), Trusts(c, b) => Trusts(a, c)
// BBpm
1.0 Knows(b, a), Knows(c, b), Knows(a, c), Trusts(b, a), !Trusts(c, b) => !Trusts(a, c)
// BBmp
1.0 Knows(b, a), Knows(c, b), Knows(a, c), !Trusts(b, a), Trusts(c, b) => !Trusts(a, c)
// BBmm
1.0 Knows(b, a), Knows(c, b), Knows(a, c), !Trusts(b, a), !Trusts(c, b) => Trusts(a, c)

1.0 Knows(a, b), Knows(b, a), Trusts(a, b) => Trusts(b, a)
1.0 Knows(a, b), Knows(b, a), !Trusts(a, b) => !Trusts(b, a)

// two-sided prior
// There is only one ground atom in Prior,  so it is safe to not bind that variable.
1.0 Knows(a, b), Prior(constant) => Trusts(a, b)
// 1.0 Knows(a, b), Trusts(a, b) => Prior(constant)
